{"ast":null,"code":"//import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nimport { userSlice } from \"./auth-slice\";\nimport { counterSlice } from \"./counter-slice\";\nconst initialState = {\n  value: 0,\n  showCounter: true\n};\nexport const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\n\n//createSlice takes an object with a name and an initial state, and an object with reducers\n//you can directly mutate the state in the reducers\n/*\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.value++;\n    },\n    decrement(state) {\n      state.value--;\n    },\n    increase(state, action) {\n      console.log(action.payload.amount);\n      state.value += action.payload.amount;\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n*/\n/*\n//with normal redux, you cannot mutate the stae directly, you have to return a new state object\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { ...state, value: state.value + 1 };\n    case \"DECREMENT\":\n      return { ...state, value: state.value - 1 };\n    case \"INCREASE\":\n      return { ...state, value: state.value + action.amount };\n    case \"TOGGLE\":\n      return { ...state, showCounter: !state.showCounter };\n    default:\n      return state;\n  }\n};\n\n\nconst store = createStore(reducer, { value: 0 });\n*/\n\n//const store = createStore(counterSlice.reducer);\n/*\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: { isAuthenticated: false },\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  },\n});\n*/\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice,\n    user: userSlice\n  }\n});\nexport const userActions = userSlice.actions;\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","userSlice","counterSlice","initialState","value","showCounter","INCREMENT","DECREMENT","store","reducer","counter","user","userActions","actions","counterActions"],"sources":["/Users/jared/Documents/dev/Jareds-React-Projects/React Projects/Section 18 - Redux Intro/Intro to Redux & React/src/store/index.js"],"sourcesContent":["//import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nimport { userSlice } from \"./auth-slice\";\nimport { counterSlice } from \"./counter-slice\";\nconst initialState = { value: 0, showCounter: true };\n\nexport const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\n\n//createSlice takes an object with a name and an initial state, and an object with reducers\n//you can directly mutate the state in the reducers\n/*\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.value++;\n    },\n    decrement(state) {\n      state.value--;\n    },\n    increase(state, action) {\n      console.log(action.payload.amount);\n      state.value += action.payload.amount;\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n*/\n/*\n//with normal redux, you cannot mutate the stae directly, you have to return a new state object\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { ...state, value: state.value + 1 };\n    case \"DECREMENT\":\n      return { ...state, value: state.value - 1 };\n    case \"INCREASE\":\n      return { ...state, value: state.value + action.amount };\n    case \"TOGGLE\":\n      return { ...state, showCounter: !state.showCounter };\n    default:\n      return state;\n  }\n};\n\n\nconst store = createStore(reducer, { value: 0 });\n*/\n\n//const store = createStore(counterSlice.reducer);\n/*\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: { isAuthenticated: false },\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  },\n});\n*/\n\nconst store = configureStore({\n  reducer: { counter: counterSlice, user: userSlice },\n});\n\nexport const userActions = userSlice.actions;\nexport const counterActions = counterSlice.actions;\n\nexport default store;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAC9D,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,MAAMC,YAAY,GAAG;EAAEC,KAAK,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAEpD,OAAO,MAAMC,SAAS,GAAG,WAAW;AACpC,OAAO,MAAMC,SAAS,GAAG,WAAW;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAGR,cAAc,CAAC;EAC3BS,OAAO,EAAE;IAAEC,OAAO,EAAER,YAAY;IAAES,IAAI,EAAEV;EAAU;AACpD,CAAC,CAAC;AAEF,OAAO,MAAMW,WAAW,GAAGX,SAAS,CAACY,OAAO;AAC5C,OAAO,MAAMC,cAAc,GAAGZ,YAAY,CAACW,OAAO;AAElD,eAAeL,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}