{"ast":null,"code":"//import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  value: 0,\n  showCounter: true\n};\nexport const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\n\n//createSlice takes an object with a name and an initial state, and an object with reducers\n//you can directly mutate the state in the reducers\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.value++;\n    },\n    decrement(state) {\n      state.value--;\n    },\n    increase(state, action) {\n      state.value += action.payload;\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst fartSlice = createSlice({\n  name: \"fart\",\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    fart(state) {\n      state.value += 100;\n    },\n    unfart(state) {\n      state.value -= 100;\n    }\n  }\n});\n\n/*\n//with normal redux, you cannot mutate the stae directly, you have to return a new state object\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { ...state, value: state.value + 1 };\n    case \"DECREMENT\":\n      return { ...state, value: state.value - 1 };\n    case \"INCREASE\":\n      return { ...state, value: state.value + action.amount };\n    case \"TOGGLE\":\n      return { ...state, showCounter: !state.showCounter };\n    default:\n      return state;\n  }\n};\n\n\nconst store = createStore(reducer, { value: 0 });\n*/\n\n//const store = createStore(counterSlice.reducer);\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    fart: fartSlice.reducer\n  }\n});\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialState","value","showCounter","INCREMENT","DECREMENT","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggle","fartSlice","fart","unfart","store","reducer","counter"],"sources":["/Users/jared/Documents/dev/Jareds-React-Projects/React Projects/Section 18 - Redux Intro/Intro to Redux & React/src/store/index.js"],"sourcesContent":["//import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst initialState = { value: 0, showCounter: true };\n\nexport const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\n\n//createSlice takes an object with a name and an initial state, and an object with reducers\n//you can directly mutate the state in the reducers\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.value++;\n    },\n    decrement(state) {\n      state.value--;\n    },\n    increase(state, action) {\n      state.value += action.payload;\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\n\n\nconst fartSlice = createSlice({\n  name: \"fart\",\n  initialState: { value: 0 },\n  reducers: {\n    fart(state) {\n      state.value += 100;\n    },\n    unfart(state) {\n      state.value -= 100;\n    },\n  },\n});\n\n/*\n//with normal redux, you cannot mutate the stae directly, you have to return a new state object\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { ...state, value: state.value + 1 };\n    case \"DECREMENT\":\n      return { ...state, value: state.value - 1 };\n    case \"INCREASE\":\n      return { ...state, value: state.value + action.amount };\n    case \"TOGGLE\":\n      return { ...state, showCounter: !state.showCounter };\n    default:\n      return state;\n  }\n};\n\n\nconst store = createStore(reducer, { value: 0 });\n*/\n\n//const store = createStore(counterSlice.reducer);\n\nconst store = configureStore({\n  reducer: { counter: counterSlice.reducer, fart: fartSlice.reducer },\n});\n\n\n\nexport default store;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,YAAY,GAAG;EAAEC,KAAK,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAEpD,OAAO,MAAMC,SAAS,GAAG,WAAW;AACpC,OAAO,MAAMC,SAAS,GAAG,WAAW;;AAEpC;AACA;AACA,MAAMC,YAAY,GAAGP,WAAW,CAAC;EAC/BQ,IAAI,EAAE,SAAS;EACfN,YAAY;EACZO,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACR,KAAK,EAAE;IACf,CAAC;IACDS,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACR,KAAK,EAAE;IACf,CAAC;IACDU,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACR,KAAK,IAAIW,MAAM,CAACC,OAAO;IAC/B,CAAC;IACDC,MAAMA,CAACL,KAAK,EAAE;MACZA,KAAK,CAACP,WAAW,GAAG,CAACO,KAAK,CAACP,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAIF,MAAMa,SAAS,GAAGjB,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZN,YAAY,EAAE;IAAEC,KAAK,EAAE;EAAE,CAAC;EAC1BM,QAAQ,EAAE;IACRS,IAAIA,CAACP,KAAK,EAAE;MACVA,KAAK,CAACR,KAAK,IAAI,GAAG;IACpB,CAAC;IACDgB,MAAMA,CAACR,KAAK,EAAE;MACZA,KAAK,CAACR,KAAK,IAAI,GAAG;IACpB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAMiB,KAAK,GAAGnB,cAAc,CAAC;EAC3BoB,OAAO,EAAE;IAAEC,OAAO,EAAEf,YAAY,CAACc,OAAO;IAAEH,IAAI,EAAED,SAAS,CAACI;EAAQ;AACpE,CAAC,CAAC;AAIF,eAAeD,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}