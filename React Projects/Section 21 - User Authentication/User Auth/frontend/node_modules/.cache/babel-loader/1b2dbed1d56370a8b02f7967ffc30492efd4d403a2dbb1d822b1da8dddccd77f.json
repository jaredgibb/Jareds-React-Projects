{"ast":null,"code":"var _jsxFileName = \"/Users/jared/Documents/dev/Jareds-React-Projects/React Projects/Section 21 - User Authentication/User Auth/frontend/src/pages/Authentication.js\";\nimport { json, redirect } from \"react-router-dom\";\nimport AuthForm from \"../components/AuthForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport async function action({\n  request\n}) {\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get(\"mode\") || \"login\";\n  if (mode !== \"login\" && mode !== \"signup\") {\n    throw json({\n      status: 400,\n      statusText: \"Bad Request\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: {\n        message: \"Invalid mode.\"\n      }\n    });\n  }\n  const data = await request.formData();\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\")\n  };\n  const response = await fetch(`http://localhost:8080/${mode}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(authData)\n  });\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: \"Authentication failed!\"\n    }, {\n      status: 500\n    });\n  }\n  const resData = await response.json();\n  const {\n    token\n  } = resData;\n\n  //store token in session storage\n  sessionStorage.setItem(\"token\", token);\n  sessionStorage.setItem(\"expiration\");\n  return redirect(\"/\");\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["json","redirect","AuthForm","jsxDEV","_jsxDEV","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","searchParams","URL","url","mode","get","status","statusText","headers","body","message","data","formData","authData","email","password","response","fetch","method","JSON","stringify","ok","resData","token","sessionStorage","setItem","$RefreshReg$"],"sources":["/Users/jared/Documents/dev/Jareds-React-Projects/React Projects/Section 21 - User Authentication/User Auth/frontend/src/pages/Authentication.js"],"sourcesContent":["import { json, redirect } from \"react-router-dom\";\nimport AuthForm from \"../components/AuthForm\";\n\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\nexport async function action({ request }) {\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get(\"mode\") || \"login\";\n\n  if (mode !== \"login\" && mode !== \"signup\") {\n    throw json({\n      status: 400,\n      statusText: \"Bad Request\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      body: {\n        message: \"Invalid mode.\",\n      },\n    });\n  }\n\n  const data = await request.formData();\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\"),\n  };\n\n  const response = await fetch(`http://localhost:8080/${mode}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(authData),\n  });\n\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n\n  if (!response.ok) {\n    throw json(\n      { message: \"Authentication failed!\" },\n      {\n        status: 500,\n      }\n    );\n  }\n\n  const resData = await response.json();\n  const { token } = resData;\n\n  //store token in session storage\n  sessionStorage.setItem(\"token\", token);\n  sessionStorage.setItem(\"expiration\")\n\n  return redirect(\"/\");\n}\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,oBAAOD,OAAA,CAACF,QAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB;AAACC,EAAA,GAFQL,kBAAkB;AAI3B,eAAeA,kBAAkB;AAEjC,OAAO,eAAeM,MAAMA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EACxC,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACF,YAAY;EACtD,MAAMG,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO;EAEhD,IAAID,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,EAAE;IACzC,MAAMhB,IAAI,CAAC;MACTkB,MAAM,EAAE,GAAG;MACXC,UAAU,EAAE,aAAa;MACzBC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAE;QACJC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;EAEA,MAAMC,IAAI,GAAG,MAAMX,OAAO,CAACY,QAAQ,CAAC,CAAC;EACrC,MAAMC,QAAQ,GAAG;IACfC,KAAK,EAAEH,IAAI,CAACN,GAAG,CAAC,OAAO,CAAC;IACxBU,QAAQ,EAAEJ,IAAI,CAACN,GAAG,CAAC,UAAU;EAC/B,CAAC;EAED,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAE,yBAAwBb,IAAK,EAAC,EAAE;IAC5Dc,MAAM,EAAE,MAAM;IACdV,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEU,IAAI,CAACC,SAAS,CAACP,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAIG,QAAQ,CAACV,MAAM,KAAK,GAAG,IAAIU,QAAQ,CAACV,MAAM,KAAK,GAAG,EAAE;IACtD,OAAOU,QAAQ;EACjB;EAEA,IAAI,CAACA,QAAQ,CAACK,EAAE,EAAE;IAChB,MAAMjC,IAAI,CACR;MAAEsB,OAAO,EAAE;IAAyB,CAAC,EACrC;MACEJ,MAAM,EAAE;IACV,CACF,CAAC;EACH;EAEA,MAAMgB,OAAO,GAAG,MAAMN,QAAQ,CAAC5B,IAAI,CAAC,CAAC;EACrC,MAAM;IAAEmC;EAAM,CAAC,GAAGD,OAAO;;EAEzB;EACAE,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACtCC,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC;EAEpC,OAAOpC,QAAQ,CAAC,GAAG,CAAC;AACtB;AAAC,IAAAS,EAAA;AAAA4B,YAAA,CAAA5B,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}